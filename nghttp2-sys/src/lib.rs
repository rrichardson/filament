/* automatically generated by rust-bindgen */
#![allow(non_camel_case_types)]
#![allow(improper_ctypes)]

use std::os::raw::c_void;

pub enum nghttp2_session {}

#[repr(C)]
#[derive(Copy)]
pub struct nghttp2_info {
    pub age: isize,
    pub version_num: isize,
    pub version_str: *const u8,
    pub proto_str: *const u8,
}
impl ::std::clone::Clone for nghttp2_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nghttp2_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
pub enum nghttp2_error {
    NGHTTP2_ERR_INVALID_ARGUMENT = -501,
    NGHTTP2_ERR_BUFFER_ERROR = -502,
    NGHTTP2_ERR_UNSUPPORTED_VERSION = -503,
    NGHTTP2_ERR_WOULDBLOCK = -504,
    NGHTTP2_ERR_PROTO = -505,
    NGHTTP2_ERR_INVALID_FRAME = -506,
    NGHTTP2_ERR_EOF = -507,
    NGHTTP2_ERR_DEFERRED = -508,
    NGHTTP2_ERR_STREAM_ID_NOT_AVAILABLE = -509,
    NGHTTP2_ERR_STREAM_CLOSED = -510,
    NGHTTP2_ERR_STREAM_CLOSING = -511,
    NGHTTP2_ERR_STREAM_SHUT_WR = -512,
    NGHTTP2_ERR_INVALID_STREAM_ID = -513,
    NGHTTP2_ERR_INVALID_STREAM_STATE = -514,
    NGHTTP2_ERR_DEFERRED_DATA_EXIST = -515,
    NGHTTP2_ERR_START_STREAM_NOT_ALLOWED = -516,
    NGHTTP2_ERR_GOAWAY_ALREADY_SENT = -517,
    NGHTTP2_ERR_INVALID_HEADER_BLOCK = -518,
    NGHTTP2_ERR_INVALID_STATE = -519,
    NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE = -521,
    NGHTTP2_ERR_FRAME_SIZE_ERROR = -522,
    NGHTTP2_ERR_HEADER_COMP = -523,
    NGHTTP2_ERR_FLOW_CONTROL = -524,
    NGHTTP2_ERR_INSUFF_BUFSIZE = -525,
    NGHTTP2_ERR_PAUSE = -526,
    NGHTTP2_ERR_TOO_MANY_INFLIGHT_SETTINGS = -527,
    NGHTTP2_ERR_PUSH_DISABLED = -528,
    NGHTTP2_ERR_DATA_EXIST = -529,
    NGHTTP2_ERR_SESSION_CLOSING = -530,
    NGHTTP2_ERR_HTTP_HEADER = -531,
    NGHTTP2_ERR_HTTP_MESSAGING = -532,
    NGHTTP2_ERR_REFUSED_STREAM = -533,
    NGHTTP2_ERR_INTERNAL = -534,
    NGHTTP2_ERR_FATAL = -900,
    NGHTTP2_ERR_NOMEM = -901,
    NGHTTP2_ERR_CALLBACK_FAILURE = -902,
    NGHTTP2_ERR_BAD_CLIENT_MAGIC = -903,
    NGHTTP2_ERR_FLOODED = -904
}


#[repr(C)]
pub enum nghttp2_nv_flag {
    NGHTTP2_NV_FLAG_NONE = 0,
    NGHTTP2_NV_FLAG_NO_INDEX = 1
}

#[repr(C)]
#[derive(Copy)]
pub struct nghttp2_nv {
    pub name: *mut u8,
    pub value: *mut u8,
    pub namelen: usize,
    pub valuelen: usize,
    pub flags: u8,
}
impl ::std::clone::Clone for nghttp2_nv {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nghttp2_nv {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
pub enum nghttp2_frame_type {
    NGHTTP2_DATA = 0,
    NGHTTP2_HEADERS = 1,
    NGHTTP2_PRIORITY = 2,
    NGHTTP2_RST_STREAM = 3,
    NGHTTP2_SETTINGS = 4,
    NGHTTP2_PUSH_PROMISE = 5,
    NGHTTP2_PING = 6,
    NGHTTP2_GOAWAY = 7,
    NGHTTP2_WINDOW_UPDATE = 8,
    NGHTTP2_CONTINUATION = 9
}


pub type nghttp2_flag = u8;

pub const NGHTTP2_FLAG_NONE : u8 = 0x0;
pub const NGHTTP2_FLAG_END_STREAM : u8 = 0x1;
pub const NGHTTP2_FLAG_END_HEADERS : u8 = 0x4;
pub const NGHTTP2_FLAG_ACK : u8 = 0x1;
pub const NGHTTP2_FLAG_PADDED : u8 = 0x8;
pub const NGHTTP2_FLAG_PRIORITY : u8 = 0x20;

#[repr(C)]
pub enum nghttp2_settings_id {
    NGHTTP2_SETTINGS_HEADER_TABLE_SIZE = 1,
    NGHTTP2_SETTINGS_ENABLE_PUSH = 2,
    NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS = 3,
    NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE = 4,
    NGHTTP2_SETTINGS_MAX_FRAME_SIZE = 5,
    NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE = 6
}

#[repr(C)]
pub enum nghttp2_error_code {
    NGHTTP2_NO_ERROR = 0,
    NGHTTP2_PROTOCOL_ERROR = 1,
    NGHTTP2_INTERNAL_ERROR = 2,
    NGHTTP2_FLOW_CONTROL_ERROR = 3,
    NGHTTP2_SETTINGS_TIMEOUT = 4,
    NGHTTP2_STREAM_CLOSED = 5,
    NGHTTP2_FRAME_SIZE_ERROR = 6,
    NGHTTP2_REFUSED_STREAM = 7,
    NGHTTP2_CANCEL = 8,
    NGHTTP2_COMPRESSION_ERROR = 9,
    NGHTTP2_CONNECT_ERROR = 10,
    NGHTTP2_ENHANCE_YOUR_CALM = 11,
    NGHTTP2_INADEQUATE_SECURITY = 12,
    NGHTTP2_HTTP_1_1_REQUIRED = 13
}


#[repr(C)]
#[derive(Copy)]
pub struct nghttp2_frame_hd {
    pub length: usize,
    pub stream_id: i32,
    pub _type: u8,
    pub flags: u8,
    pub reserved: u8,
}
impl ::std::clone::Clone for nghttp2_frame_hd {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nghttp2_frame_hd {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct nghttp2_data_source {
    pub _bindgen_data_: [u64; 1usize],
}
impl nghttp2_data_source {
    pub unsafe fn fd(&mut self) -> *mut isize {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ptr(&mut self) -> *mut *mut c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for nghttp2_data_source {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nghttp2_data_source {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}


#[repr(C)]
pub enum nghttp2_data_flag {
    NGHTTP2_DATA_FLAG_NONE = 0,
    NGHTTP2_DATA_FLAG_EOF = 1,
    NGHTTP2_DATA_FLAG_NO_END_STREAM = 2,
    NGHTTP2_DATA_FLAG_NO_COPY = 4
}


pub type nghttp2_data_source_read_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        stream_id: i32, buf: *mut u8,
                                        length: usize,
                                        data_flags: *mut u32,
                                        source: *mut nghttp2_data_source,
                                        user_data: *mut c_void)
                              -> isize>;
#[repr(C)]
#[derive(Copy)]
pub struct nghttp2_data_provider {
    pub source: nghttp2_data_source,
    pub read_callback: nghttp2_data_source_read_callback,
}
impl ::std::clone::Clone for nghttp2_data_provider {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nghttp2_data_provider {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}


#[repr(C)]
#[derive(Copy)]
pub struct nghttp2_data {
    pub hd: nghttp2_frame_hd,
    pub padlen: usize,
}
impl ::std::clone::Clone for nghttp2_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nghttp2_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[derive(Clone, Copy)]
#[repr(C)]
pub enum nghttp2_headers_category {
    NGHTTP2_HCAT_REQUEST = 0,
    NGHTTP2_HCAT_RESPONSE = 1,
    NGHTTP2_HCAT_PUSH_RESPONSE = 2,
    NGHTTP2_HCAT_HEADERS = 3
}

#[repr(C)]
#[derive(Copy)]
pub struct nghttp2_priority_spec {
    pub stream_id: i32,
    pub weight: i32,
    pub exclusive: u8,
}
impl ::std::clone::Clone for nghttp2_priority_spec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nghttp2_priority_spec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}


#[repr(C)]
#[derive(Copy)]
pub struct nghttp2_headers {
    pub hd: nghttp2_frame_hd,
    pub padlen: usize,
    pub pri_spec: nghttp2_priority_spec,
    pub nva: *mut nghttp2_nv,
    pub nvlen: usize,
    pub cat: nghttp2_headers_category,
}
impl ::std::clone::Clone for nghttp2_headers {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nghttp2_headers {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}


#[repr(C)]
#[derive(Copy)]
pub struct nghttp2_priority {
    pub hd: nghttp2_frame_hd,
    pub pri_spec: nghttp2_priority_spec,
}
impl ::std::clone::Clone for nghttp2_priority {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nghttp2_priority {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}


#[repr(C)]
#[derive(Copy)]
pub struct nghttp2_rst_stream {
    pub hd: nghttp2_frame_hd,
    pub error_code: u32,
}
impl ::std::clone::Clone for nghttp2_rst_stream {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nghttp2_rst_stream {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}


#[repr(C)]
#[derive(Copy)]
pub struct nghttp2_settings_entry {
    pub settings_id: i32,
    pub value: u32,
}
impl ::std::clone::Clone for nghttp2_settings_entry {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nghttp2_settings_entry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}


#[repr(C)]
#[derive(Copy)]
pub struct nghttp2_settings {
    pub hd: nghttp2_frame_hd,
    pub niv: usize,
    pub iv: *mut nghttp2_settings_entry,
}
impl ::std::clone::Clone for nghttp2_settings {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nghttp2_settings {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}


#[repr(C)]
#[derive(Copy)]
pub struct nghttp2_push_promise {
    pub hd: nghttp2_frame_hd,
    pub padlen: usize,
    pub nva: *mut nghttp2_nv,
    pub nvlen: usize,
    pub promised_stream_id: i32,
    pub reserved: u8,
}
impl ::std::clone::Clone for nghttp2_push_promise {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nghttp2_push_promise {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}


#[repr(C)]
#[derive(Copy)]
pub struct nghttp2_ping {
    pub hd: nghttp2_frame_hd,
    pub opaque_data: [u8; 8usize],
}
impl ::std::clone::Clone for nghttp2_ping {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nghttp2_ping {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}



#[repr(C)]
#[derive(Copy)]
pub struct nghttp2_goaway {
    pub hd: nghttp2_frame_hd,
    pub last_stream_id: i32,
    pub error_code: u32,
    pub opaque_data: *mut u8,
    pub opaque_data_len: usize,
    pub reserved: u8,
}
impl ::std::clone::Clone for nghttp2_goaway {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nghttp2_goaway {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}


#[repr(C)]
#[derive(Copy)]
pub struct nghttp2_window_update {
    pub hd: nghttp2_frame_hd,
    pub window_size_increment: i32,
    pub reserved: u8,
}
impl ::std::clone::Clone for nghttp2_window_update {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nghttp2_window_update {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}



#[repr(C)]
#[derive(Copy)]
pub struct nghttp2_extension {
    pub hd: nghttp2_frame_hd,
    pub payload: *mut c_void,
}
impl ::std::clone::Clone for nghttp2_extension {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nghttp2_extension {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}


#[repr(C)]
#[derive(Copy)]
pub struct nghttp2_frame {
    pub _bindgen_data_: [u64; 8usize],
}
impl nghttp2_frame {
    pub unsafe fn hd(&mut self) -> *mut nghttp2_frame_hd {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn data(&mut self) -> *mut nghttp2_data {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn headers(&mut self) -> *mut nghttp2_headers {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn priority(&mut self) -> *mut nghttp2_priority {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn rst_stream(&mut self) -> *mut nghttp2_rst_stream {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn settings(&mut self) -> *mut nghttp2_settings {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn push_promise(&mut self) -> *mut nghttp2_push_promise {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ping(&mut self) -> *mut nghttp2_ping {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn goaway(&mut self) -> *mut nghttp2_goaway {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn window_update(&mut self) -> *mut nghttp2_window_update {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ext(&mut self) -> *mut nghttp2_extension {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}

impl ::std::clone::Clone for nghttp2_frame {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nghttp2_frame {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

pub type nghttp2_send_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        data: *const u8, length: usize,
                                        flags: isize,
                                        user_data: *mut c_void)
                              -> isize>;
pub type nghttp2_send_data_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        frame: *mut nghttp2_frame,
                                        framehd: *const u8,
                                        length: usize,
                                        source: *mut nghttp2_data_source,
                                        user_data: *mut c_void)
                              -> isize>;
pub type nghttp2_recv_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        buf: *mut u8, length: usize,
                                        flags: isize,
                                        user_data: *mut c_void)
                              -> isize>;
pub type nghttp2_on_frame_recv_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        frame: *const nghttp2_frame,
                                        user_data: *mut c_void)
                              -> isize>;
pub type nghttp2_on_invalid_frame_recv_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        frame: *const nghttp2_frame,
                                        lib_error_code: isize,
                                        user_data: *mut c_void)
                              -> isize>;
pub type nghttp2_on_data_chunk_recv_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        flags: u8, stream_id: i32,
                                        data: *const u8, len: usize,
                                        user_data: *mut c_void)
                              -> isize>;
pub type nghttp2_before_frame_send_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        frame: *const nghttp2_frame,
                                        user_data: *mut c_void)
                              -> isize>;
pub type nghttp2_on_frame_send_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        frame: *const nghttp2_frame,
                                        user_data: *mut c_void)
                              -> isize>;
pub type nghttp2_on_frame_not_send_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        frame: *const nghttp2_frame,
                                        lib_error_code: isize,
                                        user_data: *mut c_void)
                              -> isize>;
pub type nghttp2_on_stream_close_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        stream_id: i32,
                                        error_code: u32,
                                        user_data: *mut c_void)
                              -> isize>;
pub type nghttp2_on_begin_headers_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        frame: *const nghttp2_frame,
                                        user_data: *mut c_void)
                              -> isize>;
pub type nghttp2_on_header_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        frame: *const nghttp2_frame,
                                        name: *const u8, namelen: usize,
                                        value: *const u8,
                                        valuelen: usize, flags: u8,
                                        user_data: *mut c_void)
                              -> isize>;
pub type nghttp2_select_padding_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        frame: *const nghttp2_frame,
                                        max_payloadlen: usize,
                                        user_data: *mut c_void)
                              -> isize>;
pub type nghttp2_data_source_read_length_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        frame_type: u8,
                                        stream_id: i32,
                                        session_remote_window_size: i32,
                                        stream_remote_window_size: i32,
                                        remote_max_frame_size: u32,
                                        user_data: *mut c_void)
                              -> isize>;
pub type nghttp2_on_begin_frame_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        hd: *const nghttp2_frame_hd,
                                        user_data: *mut c_void)
                              -> isize>;

pub enum nghttp2_session_callbacks {}

pub type nghttp2_malloc =
    ::std::option::Option<extern "C" fn(size: usize,
                                        mem_user_data: *mut c_void)
                              -> *mut c_void>;
pub type nghttp2_free =
    ::std::option::Option<extern "C" fn(ptr: *mut c_void,
                                        mem_user_data: *mut c_void)
                              -> ()>;
pub type nghttp2_calloc =
    ::std::option::Option<extern "C" fn(nmemb: usize, size: usize,
                                        mem_user_data: *mut c_void)
                              -> *mut c_void>;
pub type nghttp2_realloc =
    ::std::option::Option<extern "C" fn(ptr: *mut c_void,
                                        size: usize,
                                        mem_user_data: *mut c_void)
                              -> *mut c_void>;
#[repr(C)]
#[derive(Copy)]
pub struct nghttp2_mem {
    pub mem_user_data: *mut c_void,
    pub malloc: nghttp2_malloc,
    pub free: nghttp2_free,
    pub calloc: nghttp2_calloc,
    pub realloc: nghttp2_realloc,
}
impl ::std::clone::Clone for nghttp2_mem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nghttp2_mem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
pub struct  nghttp2_option;

#[repr(C)]
pub struct nghttp2_hd_deflater;

#[repr(C)]
pub struct nghttp2_hd_inflater;

#[repr(C)]
pub enum nghttp2_hd_inflate_flag {
    NGHTTP2_HD_INFLATE_NONE = 0,
    NGHTTP2_HD_INFLATE_FINAL = 1,
    NGHTTP2_HD_INFLATE_EMIT = 2
}


#[repr(C)]
pub struct nghttp2_stream;

#[repr(C)]
pub enum nghttp2_stream_proto_state {
    NGHTTP2_STREAM_STATE_IDLE = 1,
    NGHTTP2_STREAM_STATE_OPEN = 2,
    NGHTTP2_STREAM_STATE_RESERVED_LOCAL = 3,
    NGHTTP2_STREAM_STATE_RESERVED_REMOTE = 4,
    NGHTTP2_STREAM_STATE_HALF_CLOSED_LOCAL = 5,
    NGHTTP2_STREAM_STATE_HALF_CLOSED_REMOTE = 6,
    NGHTTP2_STREAM_STATE_CLOSED = 7
}


extern "C" {
    pub fn nghttp2_session_callbacks_new(callbacks_ptr:
                                             *mut *mut nghttp2_session_callbacks)
     -> isize;
    pub fn nghttp2_session_callbacks_del(callbacks:
                                             *mut nghttp2_session_callbacks)
     -> ();
    pub fn nghttp2_session_callbacks_set_send_callback(cbs:
                                                           *mut nghttp2_session_callbacks,
                                                       send_callback:
                                                           nghttp2_send_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_recv_callback(cbs:
                                                           *mut nghttp2_session_callbacks,
                                                       recv_callback:
                                                           nghttp2_recv_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_on_frame_recv_callback(cbs:
                                                                    *mut nghttp2_session_callbacks,
                                                                on_frame_recv_callback:
                                                                    nghttp2_on_frame_recv_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_on_invalid_frame_recv_callback(cbs:
                                                                            *mut nghttp2_session_callbacks,
                                                                        on_invalid_frame_recv_callback:
                                                                            nghttp2_on_invalid_frame_recv_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_on_data_chunk_recv_callback(cbs:
                                                                         *mut nghttp2_session_callbacks,
                                                                     on_data_chunk_recv_callback:
                                                                         nghttp2_on_data_chunk_recv_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_before_frame_send_callback(cbs:
                                                                        *mut nghttp2_session_callbacks,
                                                                    before_frame_send_callback:
                                                                        nghttp2_before_frame_send_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_on_frame_send_callback(cbs:
                                                                    *mut nghttp2_session_callbacks,
                                                                on_frame_send_callback:
                                                                    nghttp2_on_frame_send_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_on_frame_not_send_callback(cbs:
                                                                        *mut nghttp2_session_callbacks,
                                                                    on_frame_not_send_callback:
                                                                        nghttp2_on_frame_not_send_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_on_stream_close_callback(cbs:
                                                                      *mut nghttp2_session_callbacks,
                                                                  on_stream_close_callback:
                                                                      nghttp2_on_stream_close_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_on_begin_headers_callback(cbs:
                                                                       *mut nghttp2_session_callbacks,
                                                                   on_begin_headers_callback:
                                                                       nghttp2_on_begin_headers_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_on_header_callback(cbs:
                                                                *mut nghttp2_session_callbacks,
                                                            on_header_callback:
                                                                nghttp2_on_header_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_select_padding_callback(cbs:
                                                                     *mut nghttp2_session_callbacks,
                                                                 select_padding_callback:
                                                                     nghttp2_select_padding_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_data_source_read_length_callback(cbs:
                                                                              *mut nghttp2_session_callbacks,
                                                                          data_source_read_length_callback:
                                                                              nghttp2_data_source_read_length_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_on_begin_frame_callback(cbs:
                                                                     *mut nghttp2_session_callbacks,
                                                                 on_begin_frame_callback:
                                                                     nghttp2_on_begin_frame_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_send_data_callback(cbs:
                                                                *mut nghttp2_session_callbacks,
                                                            send_data_callback:
                                                                nghttp2_send_data_callback)
     -> ();
    pub fn nghttp2_option_new(option_ptr: *mut *mut nghttp2_option)
     -> isize;
    pub fn nghttp2_option_del(option: *mut nghttp2_option) -> ();
    pub fn nghttp2_option_set_no_auto_window_update(option:
                                                        *mut nghttp2_option,
                                                    val: isize) -> ();
    pub fn nghttp2_option_set_peer_max_concurrent_streams(option:
                                                              *mut nghttp2_option,
                                                          val: u32)
     -> ();
    pub fn nghttp2_option_set_no_recv_client_magic(option:
                                                       *mut nghttp2_option,
                                                   val: isize) -> ();
    pub fn nghttp2_option_set_no_http_messaging(option: *mut nghttp2_option,
                                                val: isize) -> ();
    pub fn nghttp2_option_set_max_reserved_remote_streams(option:
                                                              *mut nghttp2_option,
                                                          val: u32)
     -> ();
    pub fn nghttp2_session_client_new(session_ptr: *mut *mut nghttp2_session,
                                      callbacks:
                                          *const nghttp2_session_callbacks,
                                      user_data: *mut c_void)
     -> isize;
    pub fn nghttp2_session_server_new(session_ptr: *mut *mut nghttp2_session,
                                      callbacks:
                                          *const nghttp2_session_callbacks,
                                      user_data: *mut c_void)
     -> isize;
    pub fn nghttp2_session_client_new2(session_ptr: *mut *mut nghttp2_session,
                                       callbacks:
                                           *const nghttp2_session_callbacks,
                                       user_data: *mut c_void,
                                       option: *const nghttp2_option)
     -> isize;
    pub fn nghttp2_session_server_new2(session_ptr: *mut *mut nghttp2_session,
                                       callbacks:
                                           *const nghttp2_session_callbacks,
                                       user_data: *mut c_void,
                                       option: *const nghttp2_option)
     -> isize;
    pub fn nghttp2_session_client_new3(session_ptr: *mut *mut nghttp2_session,
                                       callbacks:
                                           *const nghttp2_session_callbacks,
                                       user_data: *mut c_void,
                                       option: *const nghttp2_option,
                                       mem: *mut nghttp2_mem)
     -> isize;
    pub fn nghttp2_session_server_new3(session_ptr: *mut *mut nghttp2_session,
                                       callbacks:
                                           *const nghttp2_session_callbacks,
                                       user_data: *mut c_void,
                                       option: *const nghttp2_option,
                                       mem: *mut nghttp2_mem)
     -> isize;
    pub fn nghttp2_session_del(session: *mut nghttp2_session) -> ();
    pub fn nghttp2_session_send(session: *mut nghttp2_session)
     -> isize;
    pub fn nghttp2_session_mem_send(session: *mut nghttp2_session,
                                    data_ptr: *mut *const u8) -> isize;
    pub fn nghttp2_session_recv(session: *mut nghttp2_session)
     -> isize;
    pub fn nghttp2_session_mem_recv(session: *mut nghttp2_session,
                                    _in: *const u8, inlen: usize)
     -> isize;
    pub fn nghttp2_session_resume_data(session: *mut nghttp2_session,
                                       stream_id: i32) -> isize;
    pub fn nghttp2_session_want_read(session: *mut nghttp2_session)
     -> isize;
    pub fn nghttp2_session_want_write(session: *mut nghttp2_session)
     -> isize;
    pub fn nghttp2_session_get_stream_user_data(session: *mut nghttp2_session,
                                                stream_id: i32)
     -> *mut c_void;
    pub fn nghttp2_session_set_stream_user_data(session: *mut nghttp2_session,
                                                stream_id: i32,
                                                stream_user_data:
                                                    *mut c_void)
     -> isize;
    pub fn nghttp2_session_get_outbound_queue_size(session:
                                                       *mut nghttp2_session)
     -> usize;
    pub fn nghttp2_session_get_stream_effective_recv_data_length(session:
                                                                     *mut nghttp2_session,
                                                                 stream_id:
                                                                     i32)
     -> i32;
    pub fn nghttp2_session_get_stream_effective_local_window_size(session:
                                                                      *mut nghttp2_session,
                                                                  stream_id:
                                                                      i32)
     -> i32;
    pub fn nghttp2_session_get_effective_recv_data_length(session:
                                                              *mut nghttp2_session)
     -> i32;
    pub fn nghttp2_session_get_effective_local_window_size(session:
                                                               *mut nghttp2_session)
     -> i32;
    pub fn nghttp2_session_get_stream_remote_window_size(session:
                                                             *mut nghttp2_session,
                                                         stream_id: i32)
     -> i32;
    pub fn nghttp2_session_get_remote_window_size(session:
                                                      *mut nghttp2_session)
     -> i32;
    pub fn nghttp2_session_get_stream_local_close(session:
                                                      *mut nghttp2_session,
                                                  stream_id: i32)
     -> isize;
    pub fn nghttp2_session_get_stream_remote_close(session:
                                                       *mut nghttp2_session,
                                                   stream_id: i32)
     -> isize;
    pub fn nghttp2_session_terminate_session(session: *mut nghttp2_session,
                                             error_code: u32)
     -> isize;
    pub fn nghttp2_session_terminate_session2(session: *mut nghttp2_session,
                                              last_stream_id: i32,
                                              error_code: u32)
     -> isize;
    pub fn nghttp2_submit_shutdown_notice(session: *mut nghttp2_session)
     -> isize;
    pub fn nghttp2_session_get_remote_settings(session: *mut nghttp2_session,
                                               id: nghttp2_settings_id)
     -> u32;
    pub fn nghttp2_session_set_next_stream_id(session: *mut nghttp2_session,
                                              next_stream_id: i32)
     -> isize;
    pub fn nghttp2_session_get_next_stream_id(session: *mut nghttp2_session)
     -> u32;
    pub fn nghttp2_session_consume(session: *mut nghttp2_session,
                                   stream_id: i32, size: usize)
     -> isize;
    pub fn nghttp2_session_consume_connection(session: *mut nghttp2_session,
                                              size: usize) -> isize;
    pub fn nghttp2_session_consume_stream(session: *mut nghttp2_session,
                                          stream_id: i32, size: usize)
     -> isize;
    pub fn nghttp2_session_upgrade(session: *mut nghttp2_session,
                                   settings_payload: *const u8,
                                   settings_payloadlen: usize,
                                   stream_user_data: *mut c_void)
     -> isize;
    pub fn nghttp2_pack_settings_payload(buf: *mut u8, buflen: usize,
                                         iv: *const nghttp2_settings_entry,
                                         niv: usize) -> isize;
    pub fn nghttp2_strerror(lib_error_code: isize)
     -> *const u8;
    pub fn nghttp2_priority_spec_init(pri_spec: *mut nghttp2_priority_spec,
                                      stream_id: i32, weight: i32,
                                      exclusive: isize) -> ();
    pub fn nghttp2_priority_spec_default_init(pri_spec:
                                                  *mut nghttp2_priority_spec)
     -> ();
    pub fn nghttp2_priority_spec_check_default(pri_spec:
                                                   *const nghttp2_priority_spec)
     -> isize;
    pub fn nghttp2_submit_request(session: *mut nghttp2_session,
                                  pri_spec: *const nghttp2_priority_spec,
                                  nva: *const nghttp2_nv, nvlen: usize,
                                  data_prd: *const nghttp2_data_provider,
                                  stream_user_data: *mut c_void)
     -> i32;
    pub fn nghttp2_submit_response(session: *mut nghttp2_session,
                                   stream_id: i32, nva: *const nghttp2_nv,
                                   nvlen: usize,
                                   data_prd: *const nghttp2_data_provider)
     -> isize;
    pub fn nghttp2_submit_trailer(session: *mut nghttp2_session,
                                  stream_id: i32, nva: *const nghttp2_nv,
                                  nvlen: usize) -> isize;
    pub fn nghttp2_submit_headers(session: *mut nghttp2_session,
                                  flags: u8, stream_id: i32,
                                  pri_spec: *const nghttp2_priority_spec,
                                  nva: *const nghttp2_nv, nvlen: usize,
                                  stream_user_data: *mut c_void)
     -> i32;
    pub fn nghttp2_submit_data(session: *mut nghttp2_session, flags: u8,
                               stream_id: i32,
                               data_prd: *const nghttp2_data_provider)
     -> isize;
    pub fn nghttp2_submit_priority(session: *mut nghttp2_session,
                                   flags: u8, stream_id: i32,
                                   pri_spec: *const nghttp2_priority_spec)
     -> isize;
    pub fn nghttp2_submit_rst_stream(session: *mut nghttp2_session,
                                     flags: u8, stream_id: i32,
                                     error_code: u32) -> isize;
    pub fn nghttp2_submit_settings(session: *mut nghttp2_session,
                                   flags: u8,
                                   iv: *const nghttp2_settings_entry,
                                   niv: usize) -> isize;
    pub fn nghttp2_submit_push_promise(session: *mut nghttp2_session,
                                       flags: u8, stream_id: i32,
                                       nva: *const nghttp2_nv, nvlen: usize,
                                       promised_stream_user_data:
                                           *mut c_void) -> i32;
    pub fn nghttp2_submit_ping(session: *mut nghttp2_session, flags: u8,
                               opaque_data: *const u8) -> isize;
    pub fn nghttp2_submit_goaway(session: *mut nghttp2_session,
                                 flags: u8, last_stream_id: i32,
                                 error_code: u32,
                                 opaque_data: *const u8,
                                 opaque_data_len: usize) -> isize;
    pub fn nghttp2_session_get_last_proc_stream_id(session:
                                                       *mut nghttp2_session)
     -> i32;
    pub fn nghttp2_session_check_request_allowed(session:
                                                     *mut nghttp2_session)
     -> isize;
    pub fn nghttp2_submit_window_update(session: *mut nghttp2_session,
                                        flags: u8, stream_id: i32,
                                        window_size_increment: i32)
     -> isize;
    pub fn nghttp2_nv_compare_name(lhs: *const nghttp2_nv,
                                   rhs: *const nghttp2_nv) -> isize;
    pub fn nghttp2_select_next_protocol(out: *mut *mut u8,
                                        outlen: *mut u8,
                                        _in: *const u8,
                                        inlen: usize)
     -> isize;
    pub fn nghttp2_version(least_version: isize) -> *mut nghttp2_info;
    pub fn nghttp2_is_fatal(lib_error_code: isize) -> isize;
    pub fn nghttp2_check_header_name(name: *const u8, len: usize)
     -> isize;
    pub fn nghttp2_check_header_value(value: *const u8, len: usize)
     -> isize;
    pub fn nghttp2_hd_deflate_new(deflater_ptr: *mut *mut nghttp2_hd_deflater,
                                  deflate_hd_table_bufsize_max: usize)
     -> isize;
    pub fn nghttp2_hd_deflate_new2(deflater_ptr:
                                       *mut *mut nghttp2_hd_deflater,
                                   deflate_hd_table_bufsize_max: usize,
                                   mem: *mut nghttp2_mem) -> isize;
    pub fn nghttp2_hd_deflate_del(deflater: *mut nghttp2_hd_deflater) -> ();
    pub fn nghttp2_hd_deflate_change_table_size(deflater:
                                                    *mut nghttp2_hd_deflater,
                                                settings_hd_table_bufsize_max:
                                                    usize) -> isize;
    pub fn nghttp2_hd_deflate_hd(deflater: *mut nghttp2_hd_deflater,
                                 buf: *mut u8, buflen: usize,
                                 nva: *const nghttp2_nv, nvlen: usize)
     -> isize;
    pub fn nghttp2_hd_deflate_bound(deflater: *mut nghttp2_hd_deflater,
                                    nva: *const nghttp2_nv, nvlen: usize)
     -> usize;
    pub fn nghttp2_hd_deflate_get_num_table_entries(deflater:
                                                        *mut nghttp2_hd_deflater)
     -> usize;
    pub fn nghttp2_hd_deflate_get_table_entry(deflater:
                                                  *mut nghttp2_hd_deflater,
                                              idx: usize)
     -> *const nghttp2_nv;
    pub fn nghttp2_hd_deflate_get_dynamic_table_size(deflater:
                                                         *mut nghttp2_hd_deflater)
     -> usize;
    pub fn nghttp2_hd_deflate_get_max_dynamic_table_size(deflater:
                                                             *mut nghttp2_hd_deflater)
     -> usize;
    pub fn nghttp2_hd_inflate_new(inflater_ptr: *mut *mut nghttp2_hd_inflater)
     -> isize;
    pub fn nghttp2_hd_inflate_new2(inflater_ptr:
                                       *mut *mut nghttp2_hd_inflater,
                                   mem: *mut nghttp2_mem) -> isize;
    pub fn nghttp2_hd_inflate_del(inflater: *mut nghttp2_hd_inflater) -> ();
    pub fn nghttp2_hd_inflate_change_table_size(inflater:
                                                    *mut nghttp2_hd_inflater,
                                                settings_hd_table_bufsize_max:
                                                    usize) -> isize;
    pub fn nghttp2_hd_inflate_hd(inflater: *mut nghttp2_hd_inflater,
                                 nv_out: *mut nghttp2_nv,
                                 inflate_flags: *mut isize,
                                 _in: *mut u8, inlen: usize,
                                 in_final: isize) -> isize;
    pub fn nghttp2_hd_inflate_end_headers(inflater: *mut nghttp2_hd_inflater)
     -> isize;
    pub fn nghttp2_hd_inflate_get_num_table_entries(inflater:
                                                        *mut nghttp2_hd_inflater)
     -> usize;
    pub fn nghttp2_hd_inflate_get_table_entry(inflater:
                                                  *mut nghttp2_hd_inflater,
                                              idx: usize)
     -> *const nghttp2_nv;
    pub fn nghttp2_hd_inflate_get_dynamic_table_size(inflater:
                                                         *mut nghttp2_hd_inflater)
     -> usize;
    pub fn nghttp2_hd_inflate_get_max_dynamic_table_size(inflater:
                                                             *mut nghttp2_hd_inflater)
     -> usize;
    pub fn nghttp2_session_find_stream(session: *mut nghttp2_session,
                                       stream_id: i32)
     -> *mut nghttp2_stream;
    pub fn nghttp2_stream_get_state(stream: *mut nghttp2_stream)
     -> nghttp2_stream_proto_state;
    pub fn nghttp2_session_get_root_stream(session: *mut nghttp2_session)
     -> *mut nghttp2_stream;
    pub fn nghttp2_stream_get_parent(stream: *mut nghttp2_stream)
     -> *mut nghttp2_stream;
    pub fn nghttp2_stream_get_stream_id(stream: *mut nghttp2_stream)
     -> i32;
    pub fn nghttp2_stream_get_next_sibling(stream: *mut nghttp2_stream)
     -> *mut nghttp2_stream;
    pub fn nghttp2_stream_get_previous_sibling(stream: *mut nghttp2_stream)
     -> *mut nghttp2_stream;
    pub fn nghttp2_stream_get_first_child(stream: *mut nghttp2_stream)
     -> *mut nghttp2_stream;
    pub fn nghttp2_stream_get_weight(stream: *mut nghttp2_stream) -> i32;
    pub fn nghttp2_stream_get_sum_dependency_weight(stream:
                                                        *mut nghttp2_stream)
     -> i32;
}

