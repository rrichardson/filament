/* automatically generated by rust-bindgen */

pub enum Struct_nghttp2_session { }
pub type nghttp2_session = Struct_nghttp2_session;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub age: ::libc::c_int,
    pub version_num: ::libc::c_int,
    pub version_str: *const ::libc::c_char,
    pub proto_str: *const ::libc::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nghttp2_info = Struct_Unnamed1;
pub type Enum_Unnamed2 = ::libc::c_int;
pub const NGHTTP2_ERR_INVALID_ARGUMENT: ::libc::c_int = -501;
pub const NGHTTP2_ERR_BUFFER_ERROR: ::libc::c_int = -502;
pub const NGHTTP2_ERR_UNSUPPORTED_VERSION: ::libc::c_int = -503;
pub const NGHTTP2_ERR_WOULDBLOCK: ::libc::c_int = -504;
pub const NGHTTP2_ERR_PROTO: ::libc::c_int = -505;
pub const NGHTTP2_ERR_INVALID_FRAME: ::libc::c_int = -506;
pub const NGHTTP2_ERR_EOF: ::libc::c_int = -507;
pub const NGHTTP2_ERR_DEFERRED: ::libc::c_int = -508;
pub const NGHTTP2_ERR_STREAM_ID_NOT_AVAILABLE: ::libc::c_int = -509;
pub const NGHTTP2_ERR_STREAM_CLOSED: ::libc::c_int = -510;
pub const NGHTTP2_ERR_STREAM_CLOSING: ::libc::c_int = -511;
pub const NGHTTP2_ERR_STREAM_SHUT_WR: ::libc::c_int = -512;
pub const NGHTTP2_ERR_INVALID_STREAM_ID: ::libc::c_int = -513;
pub const NGHTTP2_ERR_INVALID_STREAM_STATE: ::libc::c_int = -514;
pub const NGHTTP2_ERR_DEFERRED_DATA_EXIST: ::libc::c_int = -515;
pub const NGHTTP2_ERR_START_STREAM_NOT_ALLOWED: ::libc::c_int = -516;
pub const NGHTTP2_ERR_GOAWAY_ALREADY_SENT: ::libc::c_int = -517;
pub const NGHTTP2_ERR_INVALID_HEADER_BLOCK: ::libc::c_int = -518;
pub const NGHTTP2_ERR_INVALID_STATE: ::libc::c_int = -519;
pub const NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE: ::libc::c_int = -521;
pub const NGHTTP2_ERR_FRAME_SIZE_ERROR: ::libc::c_int = -522;
pub const NGHTTP2_ERR_HEADER_COMP: ::libc::c_int = -523;
pub const NGHTTP2_ERR_FLOW_CONTROL: ::libc::c_int = -524;
pub const NGHTTP2_ERR_INSUFF_BUFSIZE: ::libc::c_int = -525;
pub const NGHTTP2_ERR_PAUSE: ::libc::c_int = -526;
pub const NGHTTP2_ERR_TOO_MANY_INFLIGHT_SETTINGS: ::libc::c_int = -527;
pub const NGHTTP2_ERR_PUSH_DISABLED: ::libc::c_int = -528;
pub const NGHTTP2_ERR_DATA_EXIST: ::libc::c_int = -529;
pub const NGHTTP2_ERR_SESSION_CLOSING: ::libc::c_int = -530;
pub const NGHTTP2_ERR_HTTP_HEADER: ::libc::c_int = -531;
pub const NGHTTP2_ERR_HTTP_MESSAGING: ::libc::c_int = -532;
pub const NGHTTP2_ERR_REFUSED_STREAM: ::libc::c_int = -533;
pub const NGHTTP2_ERR_INTERNAL: ::libc::c_int = -534;
pub const NGHTTP2_ERR_FATAL: ::libc::c_int = -900;
pub const NGHTTP2_ERR_NOMEM: ::libc::c_int = -901;
pub const NGHTTP2_ERR_CALLBACK_FAILURE: ::libc::c_int = -902;
pub const NGHTTP2_ERR_BAD_CLIENT_MAGIC: ::libc::c_int = -903;
pub const NGHTTP2_ERR_FLOODED: ::libc::c_int = -904;
pub type nghttp2_error = Enum_Unnamed2;
pub type Enum_Unnamed3 = ::libc::c_uint;
pub const NGHTTP2_NV_FLAG_NONE: ::libc::c_uint = 0;
pub const NGHTTP2_NV_FLAG_NO_INDEX: ::libc::c_uint = 1;
pub type nghttp2_nv_flag = Enum_Unnamed3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub name: *mut uint8_t,
    pub value: *mut uint8_t,
    pub namelen: size_t,
    pub valuelen: size_t,
    pub flags: uint8_t,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nghttp2_nv = Struct_Unnamed4;
pub type Enum_Unnamed5 = ::libc::c_uint;
pub const NGHTTP2_DATA: ::libc::c_uint = 0;
pub const NGHTTP2_HEADERS: ::libc::c_uint = 1;
pub const NGHTTP2_PRIORITY: ::libc::c_uint = 2;
pub const NGHTTP2_RST_STREAM: ::libc::c_uint = 3;
pub const NGHTTP2_SETTINGS: ::libc::c_uint = 4;
pub const NGHTTP2_PUSH_PROMISE: ::libc::c_uint = 5;
pub const NGHTTP2_PING: ::libc::c_uint = 6;
pub const NGHTTP2_GOAWAY: ::libc::c_uint = 7;
pub const NGHTTP2_WINDOW_UPDATE: ::libc::c_uint = 8;
pub const NGHTTP2_CONTINUATION: ::libc::c_uint = 9;
pub type nghttp2_frame_type = Enum_Unnamed5;
pub type Enum_Unnamed6 = ::libc::c_uint;
pub const NGHTTP2_FLAG_NONE: ::libc::c_uint = 0;
pub const NGHTTP2_FLAG_END_STREAM: ::libc::c_uint = 1;
pub const NGHTTP2_FLAG_END_HEADERS: ::libc::c_uint = 4;
pub const NGHTTP2_FLAG_ACK: ::libc::c_uint = 1;
pub const NGHTTP2_FLAG_PADDED: ::libc::c_uint = 8;
pub const NGHTTP2_FLAG_PRIORITY: ::libc::c_uint = 32;
pub type nghttp2_flag = Enum_Unnamed6;
pub type Enum_Unnamed7 = ::libc::c_uint;
pub const NGHTTP2_SETTINGS_HEADER_TABLE_SIZE: ::libc::c_uint = 1;
pub const NGHTTP2_SETTINGS_ENABLE_PUSH: ::libc::c_uint = 2;
pub const NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS: ::libc::c_uint = 3;
pub const NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE: ::libc::c_uint = 4;
pub const NGHTTP2_SETTINGS_MAX_FRAME_SIZE: ::libc::c_uint = 5;
pub const NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE: ::libc::c_uint = 6;
pub type nghttp2_settings_id = Enum_Unnamed7;
pub type Enum_Unnamed8 = ::libc::c_uint;
pub const NGHTTP2_NO_ERROR: ::libc::c_uint = 0;
pub const NGHTTP2_PROTOCOL_ERROR: ::libc::c_uint = 1;
pub const NGHTTP2_INTERNAL_ERROR: ::libc::c_uint = 2;
pub const NGHTTP2_FLOW_CONTROL_ERROR: ::libc::c_uint = 3;
pub const NGHTTP2_SETTINGS_TIMEOUT: ::libc::c_uint = 4;
pub const NGHTTP2_STREAM_CLOSED: ::libc::c_uint = 5;
pub const NGHTTP2_FRAME_SIZE_ERROR: ::libc::c_uint = 6;
pub const NGHTTP2_REFUSED_STREAM: ::libc::c_uint = 7;
pub const NGHTTP2_CANCEL: ::libc::c_uint = 8;
pub const NGHTTP2_COMPRESSION_ERROR: ::libc::c_uint = 9;
pub const NGHTTP2_CONNECT_ERROR: ::libc::c_uint = 10;
pub const NGHTTP2_ENHANCE_YOUR_CALM: ::libc::c_uint = 11;
pub const NGHTTP2_INADEQUATE_SECURITY: ::libc::c_uint = 12;
pub const NGHTTP2_HTTP_1_1_REQUIRED: ::libc::c_uint = 13;
pub type nghttp2_error_code = Enum_Unnamed8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub length: size_t,
    pub stream_id: int32_t,
    pub _type: uint8_t,
    pub flags: uint8_t,
    pub reserved: uint8_t,
}
impl ::std::clone::Clone for Struct_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nghttp2_frame_hd = Struct_Unnamed9;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed10 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed10 {
    pub unsafe fn fd(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ptr(&mut self) -> *mut *mut ::libc::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nghttp2_data_source = Union_Unnamed10;
pub type Enum_Unnamed11 = ::libc::c_uint;
pub const NGHTTP2_DATA_FLAG_NONE: ::libc::c_uint = 0;
pub const NGHTTP2_DATA_FLAG_EOF: ::libc::c_uint = 1;
pub const NGHTTP2_DATA_FLAG_NO_END_STREAM: ::libc::c_uint = 2;
pub const NGHTTP2_DATA_FLAG_NO_COPY: ::libc::c_uint = 4;
pub type nghttp2_data_flag = Enum_Unnamed11;
pub type nghttp2_data_source_read_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        stream_id: int32_t, buf: *mut uint8_t,
                                        length: size_t,
                                        data_flags: *mut uint32_t,
                                        source: *mut nghttp2_data_source,
                                        user_data: *mut ::libc::c_void)
                              -> ssize_t>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed12 {
    pub source: nghttp2_data_source,
    pub read_callback: nghttp2_data_source_read_callback,
}
impl ::std::clone::Clone for Struct_Unnamed12 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nghttp2_data_provider = Struct_Unnamed12;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed13 {
    pub hd: nghttp2_frame_hd,
    pub padlen: size_t,
}
impl ::std::clone::Clone for Struct_Unnamed13 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nghttp2_data = Struct_Unnamed13;
pub type Enum_Unnamed14 = ::libc::c_uint;
pub const NGHTTP2_HCAT_REQUEST: ::libc::c_uint = 0;
pub const NGHTTP2_HCAT_RESPONSE: ::libc::c_uint = 1;
pub const NGHTTP2_HCAT_PUSH_RESPONSE: ::libc::c_uint = 2;
pub const NGHTTP2_HCAT_HEADERS: ::libc::c_uint = 3;
pub type nghttp2_headers_category = Enum_Unnamed14;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed15 {
    pub stream_id: int32_t,
    pub weight: int32_t,
    pub exclusive: uint8_t,
}
impl ::std::clone::Clone for Struct_Unnamed15 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed15 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nghttp2_priority_spec = Struct_Unnamed15;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed16 {
    pub hd: nghttp2_frame_hd,
    pub padlen: size_t,
    pub pri_spec: nghttp2_priority_spec,
    pub nva: *mut nghttp2_nv,
    pub nvlen: size_t,
    pub cat: nghttp2_headers_category,
}
impl ::std::clone::Clone for Struct_Unnamed16 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed16 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nghttp2_headers = Struct_Unnamed16;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed17 {
    pub hd: nghttp2_frame_hd,
    pub pri_spec: nghttp2_priority_spec,
}
impl ::std::clone::Clone for Struct_Unnamed17 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed17 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nghttp2_priority = Struct_Unnamed17;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed18 {
    pub hd: nghttp2_frame_hd,
    pub error_code: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed18 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed18 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nghttp2_rst_stream = Struct_Unnamed18;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed19 {
    pub settings_id: int32_t,
    pub value: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed19 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed19 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nghttp2_settings_entry = Struct_Unnamed19;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed20 {
    pub hd: nghttp2_frame_hd,
    pub niv: size_t,
    pub iv: *mut nghttp2_settings_entry,
}
impl ::std::clone::Clone for Struct_Unnamed20 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed20 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nghttp2_settings = Struct_Unnamed20;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed21 {
    pub hd: nghttp2_frame_hd,
    pub padlen: size_t,
    pub nva: *mut nghttp2_nv,
    pub nvlen: size_t,
    pub promised_stream_id: int32_t,
    pub reserved: uint8_t,
}
impl ::std::clone::Clone for Struct_Unnamed21 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed21 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nghttp2_push_promise = Struct_Unnamed21;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed22 {
    pub hd: nghttp2_frame_hd,
    pub opaque_data: [uint8_t; 8usize],
}
impl ::std::clone::Clone for Struct_Unnamed22 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed22 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nghttp2_ping = Struct_Unnamed22;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed23 {
    pub hd: nghttp2_frame_hd,
    pub last_stream_id: int32_t,
    pub error_code: uint32_t,
    pub opaque_data: *mut uint8_t,
    pub opaque_data_len: size_t,
    pub reserved: uint8_t,
}
impl ::std::clone::Clone for Struct_Unnamed23 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed23 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nghttp2_goaway = Struct_Unnamed23;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed24 {
    pub hd: nghttp2_frame_hd,
    pub window_size_increment: int32_t,
    pub reserved: uint8_t,
}
impl ::std::clone::Clone for Struct_Unnamed24 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed24 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nghttp2_window_update = Struct_Unnamed24;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed25 {
    pub hd: nghttp2_frame_hd,
    pub payload: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_Unnamed25 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed25 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nghttp2_extension = Struct_Unnamed25;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed26 {
    pub _bindgen_data_: [u64; 8usize],
}
impl Union_Unnamed26 {
    pub unsafe fn hd(&mut self) -> *mut nghttp2_frame_hd {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn data(&mut self) -> *mut nghttp2_data {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn headers(&mut self) -> *mut nghttp2_headers {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn priority(&mut self) -> *mut nghttp2_priority {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn rst_stream(&mut self) -> *mut nghttp2_rst_stream {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn settings(&mut self) -> *mut nghttp2_settings {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn push_promise(&mut self) -> *mut nghttp2_push_promise {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ping(&mut self) -> *mut nghttp2_ping {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn goaway(&mut self) -> *mut nghttp2_goaway {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn window_update(&mut self) -> *mut nghttp2_window_update {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ext(&mut self) -> *mut nghttp2_extension {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed26 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed26 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nghttp2_frame = Union_Unnamed26;
pub type nghttp2_send_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        data: *const uint8_t, length: size_t,
                                        flags: ::libc::c_int,
                                        user_data: *mut ::libc::c_void)
                              -> ssize_t>;
pub type nghttp2_send_data_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        frame: *mut nghttp2_frame,
                                        framehd: *const uint8_t,
                                        length: size_t,
                                        source: *mut nghttp2_data_source,
                                        user_data: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type nghttp2_recv_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        buf: *mut uint8_t, length: size_t,
                                        flags: ::libc::c_int,
                                        user_data: *mut ::libc::c_void)
                              -> ssize_t>;
pub type nghttp2_on_frame_recv_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        frame: *const nghttp2_frame,
                                        user_data: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type nghttp2_on_invalid_frame_recv_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        frame: *const nghttp2_frame,
                                        lib_error_code: ::libc::c_int,
                                        user_data: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type nghttp2_on_data_chunk_recv_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        flags: uint8_t, stream_id: int32_t,
                                        data: *const uint8_t, len: size_t,
                                        user_data: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type nghttp2_before_frame_send_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        frame: *const nghttp2_frame,
                                        user_data: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type nghttp2_on_frame_send_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        frame: *const nghttp2_frame,
                                        user_data: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type nghttp2_on_frame_not_send_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        frame: *const nghttp2_frame,
                                        lib_error_code: ::libc::c_int,
                                        user_data: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type nghttp2_on_stream_close_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        stream_id: int32_t,
                                        error_code: uint32_t,
                                        user_data: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type nghttp2_on_begin_headers_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        frame: *const nghttp2_frame,
                                        user_data: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type nghttp2_on_header_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        frame: *const nghttp2_frame,
                                        name: *const uint8_t, namelen: size_t,
                                        value: *const uint8_t,
                                        valuelen: size_t, flags: uint8_t,
                                        user_data: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type nghttp2_select_padding_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        frame: *const nghttp2_frame,
                                        max_payloadlen: size_t,
                                        user_data: *mut ::libc::c_void)
                              -> ssize_t>;
pub type nghttp2_data_source_read_length_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        frame_type: uint8_t,
                                        stream_id: int32_t,
                                        session_remote_window_size: int32_t,
                                        stream_remote_window_size: int32_t,
                                        remote_max_frame_size: uint32_t,
                                        user_data: *mut ::libc::c_void)
                              -> ssize_t>;
pub type nghttp2_on_begin_frame_callback =
    ::std::option::Option<extern "C" fn(session: *mut nghttp2_session,
                                        hd: *const nghttp2_frame_hd,
                                        user_data: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub enum Struct_nghttp2_session_callbacks { }
pub type nghttp2_session_callbacks = Struct_nghttp2_session_callbacks;
pub type nghttp2_malloc =
    ::std::option::Option<extern "C" fn(size: size_t,
                                        mem_user_data: *mut ::libc::c_void)
                              -> *mut ::libc::c_void>;
pub type nghttp2_free =
    ::std::option::Option<extern "C" fn(ptr: *mut ::libc::c_void,
                                        mem_user_data: *mut ::libc::c_void)
                              -> ()>;
pub type nghttp2_calloc =
    ::std::option::Option<extern "C" fn(nmemb: size_t, size: size_t,
                                        mem_user_data: *mut ::libc::c_void)
                              -> *mut ::libc::c_void>;
pub type nghttp2_realloc =
    ::std::option::Option<extern "C" fn(ptr: *mut ::libc::c_void,
                                        size: size_t,
                                        mem_user_data: *mut ::libc::c_void)
                              -> *mut ::libc::c_void>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed27 {
    pub mem_user_data: *mut ::libc::c_void,
    pub malloc: nghttp2_malloc,
    pub free: nghttp2_free,
    pub calloc: nghttp2_calloc,
    pub realloc: nghttp2_realloc,
}
impl ::std::clone::Clone for Struct_Unnamed27 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed27 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nghttp2_mem = Struct_Unnamed27;
pub enum Struct_nghttp2_option { }
pub type nghttp2_option = Struct_nghttp2_option;
pub enum Struct_nghttp2_hd_deflater { }
pub type nghttp2_hd_deflater = Struct_nghttp2_hd_deflater;
pub enum Struct_nghttp2_hd_inflater { }
pub type nghttp2_hd_inflater = Struct_nghttp2_hd_inflater;
pub type Enum_Unnamed28 = ::libc::c_uint;
pub const NGHTTP2_HD_INFLATE_NONE: ::libc::c_uint = 0;
pub const NGHTTP2_HD_INFLATE_FINAL: ::libc::c_uint = 1;
pub const NGHTTP2_HD_INFLATE_EMIT: ::libc::c_uint = 2;
pub type nghttp2_hd_inflate_flag = Enum_Unnamed28;
pub enum Struct_nghttp2_stream { }
pub type nghttp2_stream = Struct_nghttp2_stream;
pub type Enum_Unnamed29 = ::libc::c_uint;
pub const NGHTTP2_STREAM_STATE_IDLE: ::libc::c_uint = 1;
pub const NGHTTP2_STREAM_STATE_OPEN: ::libc::c_uint = 2;
pub const NGHTTP2_STREAM_STATE_RESERVED_LOCAL: ::libc::c_uint = 3;
pub const NGHTTP2_STREAM_STATE_RESERVED_REMOTE: ::libc::c_uint = 4;
pub const NGHTTP2_STREAM_STATE_HALF_CLOSED_LOCAL: ::libc::c_uint = 5;
pub const NGHTTP2_STREAM_STATE_HALF_CLOSED_REMOTE: ::libc::c_uint = 6;
pub const NGHTTP2_STREAM_STATE_CLOSED: ::libc::c_uint = 7;
pub type nghttp2_stream_proto_state = Enum_Unnamed29;
extern "C" {
    pub fn nghttp2_session_callbacks_new(callbacks_ptr:
                                             *mut *mut nghttp2_session_callbacks)
     -> ::libc::c_int;
    pub fn nghttp2_session_callbacks_del(callbacks:
                                             *mut nghttp2_session_callbacks)
     -> ();
    pub fn nghttp2_session_callbacks_set_send_callback(cbs:
                                                           *mut nghttp2_session_callbacks,
                                                       send_callback:
                                                           nghttp2_send_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_recv_callback(cbs:
                                                           *mut nghttp2_session_callbacks,
                                                       recv_callback:
                                                           nghttp2_recv_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_on_frame_recv_callback(cbs:
                                                                    *mut nghttp2_session_callbacks,
                                                                on_frame_recv_callback:
                                                                    nghttp2_on_frame_recv_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_on_invalid_frame_recv_callback(cbs:
                                                                            *mut nghttp2_session_callbacks,
                                                                        on_invalid_frame_recv_callback:
                                                                            nghttp2_on_invalid_frame_recv_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_on_data_chunk_recv_callback(cbs:
                                                                         *mut nghttp2_session_callbacks,
                                                                     on_data_chunk_recv_callback:
                                                                         nghttp2_on_data_chunk_recv_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_before_frame_send_callback(cbs:
                                                                        *mut nghttp2_session_callbacks,
                                                                    before_frame_send_callback:
                                                                        nghttp2_before_frame_send_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_on_frame_send_callback(cbs:
                                                                    *mut nghttp2_session_callbacks,
                                                                on_frame_send_callback:
                                                                    nghttp2_on_frame_send_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_on_frame_not_send_callback(cbs:
                                                                        *mut nghttp2_session_callbacks,
                                                                    on_frame_not_send_callback:
                                                                        nghttp2_on_frame_not_send_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_on_stream_close_callback(cbs:
                                                                      *mut nghttp2_session_callbacks,
                                                                  on_stream_close_callback:
                                                                      nghttp2_on_stream_close_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_on_begin_headers_callback(cbs:
                                                                       *mut nghttp2_session_callbacks,
                                                                   on_begin_headers_callback:
                                                                       nghttp2_on_begin_headers_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_on_header_callback(cbs:
                                                                *mut nghttp2_session_callbacks,
                                                            on_header_callback:
                                                                nghttp2_on_header_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_select_padding_callback(cbs:
                                                                     *mut nghttp2_session_callbacks,
                                                                 select_padding_callback:
                                                                     nghttp2_select_padding_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_data_source_read_length_callback(cbs:
                                                                              *mut nghttp2_session_callbacks,
                                                                          data_source_read_length_callback:
                                                                              nghttp2_data_source_read_length_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_on_begin_frame_callback(cbs:
                                                                     *mut nghttp2_session_callbacks,
                                                                 on_begin_frame_callback:
                                                                     nghttp2_on_begin_frame_callback)
     -> ();
    pub fn nghttp2_session_callbacks_set_send_data_callback(cbs:
                                                                *mut nghttp2_session_callbacks,
                                                            send_data_callback:
                                                                nghttp2_send_data_callback)
     -> ();
    pub fn nghttp2_option_new(option_ptr: *mut *mut nghttp2_option)
     -> ::libc::c_int;
    pub fn nghttp2_option_del(option: *mut nghttp2_option) -> ();
    pub fn nghttp2_option_set_no_auto_window_update(option:
                                                        *mut nghttp2_option,
                                                    val: ::libc::c_int) -> ();
    pub fn nghttp2_option_set_peer_max_concurrent_streams(option:
                                                              *mut nghttp2_option,
                                                          val: uint32_t)
     -> ();
    pub fn nghttp2_option_set_no_recv_client_magic(option:
                                                       *mut nghttp2_option,
                                                   val: ::libc::c_int) -> ();
    pub fn nghttp2_option_set_no_http_messaging(option: *mut nghttp2_option,
                                                val: ::libc::c_int) -> ();
    pub fn nghttp2_option_set_max_reserved_remote_streams(option:
                                                              *mut nghttp2_option,
                                                          val: uint32_t)
     -> ();
    pub fn nghttp2_session_client_new(session_ptr: *mut *mut nghttp2_session,
                                      callbacks:
                                          *const nghttp2_session_callbacks,
                                      user_data: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn nghttp2_session_server_new(session_ptr: *mut *mut nghttp2_session,
                                      callbacks:
                                          *const nghttp2_session_callbacks,
                                      user_data: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn nghttp2_session_client_new2(session_ptr: *mut *mut nghttp2_session,
                                       callbacks:
                                           *const nghttp2_session_callbacks,
                                       user_data: *mut ::libc::c_void,
                                       option: *const nghttp2_option)
     -> ::libc::c_int;
    pub fn nghttp2_session_server_new2(session_ptr: *mut *mut nghttp2_session,
                                       callbacks:
                                           *const nghttp2_session_callbacks,
                                       user_data: *mut ::libc::c_void,
                                       option: *const nghttp2_option)
     -> ::libc::c_int;
    pub fn nghttp2_session_client_new3(session_ptr: *mut *mut nghttp2_session,
                                       callbacks:
                                           *const nghttp2_session_callbacks,
                                       user_data: *mut ::libc::c_void,
                                       option: *const nghttp2_option,
                                       mem: *mut nghttp2_mem)
     -> ::libc::c_int;
    pub fn nghttp2_session_server_new3(session_ptr: *mut *mut nghttp2_session,
                                       callbacks:
                                           *const nghttp2_session_callbacks,
                                       user_data: *mut ::libc::c_void,
                                       option: *const nghttp2_option,
                                       mem: *mut nghttp2_mem)
     -> ::libc::c_int;
    pub fn nghttp2_session_del(session: *mut nghttp2_session) -> ();
    pub fn nghttp2_session_send(session: *mut nghttp2_session)
     -> ::libc::c_int;
    pub fn nghttp2_session_mem_send(session: *mut nghttp2_session,
                                    data_ptr: *mut *const uint8_t) -> ssize_t;
    pub fn nghttp2_session_recv(session: *mut nghttp2_session)
     -> ::libc::c_int;
    pub fn nghttp2_session_mem_recv(session: *mut nghttp2_session,
                                    _in: *const uint8_t, inlen: size_t)
     -> ssize_t;
    pub fn nghttp2_session_resume_data(session: *mut nghttp2_session,
                                       stream_id: int32_t) -> ::libc::c_int;
    pub fn nghttp2_session_want_read(session: *mut nghttp2_session)
     -> ::libc::c_int;
    pub fn nghttp2_session_want_write(session: *mut nghttp2_session)
     -> ::libc::c_int;
    pub fn nghttp2_session_get_stream_user_data(session: *mut nghttp2_session,
                                                stream_id: int32_t)
     -> *mut ::libc::c_void;
    pub fn nghttp2_session_set_stream_user_data(session: *mut nghttp2_session,
                                                stream_id: int32_t,
                                                stream_user_data:
                                                    *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn nghttp2_session_get_outbound_queue_size(session:
                                                       *mut nghttp2_session)
     -> size_t;
    pub fn nghttp2_session_get_stream_effective_recv_data_length(session:
                                                                     *mut nghttp2_session,
                                                                 stream_id:
                                                                     int32_t)
     -> int32_t;
    pub fn nghttp2_session_get_stream_effective_local_window_size(session:
                                                                      *mut nghttp2_session,
                                                                  stream_id:
                                                                      int32_t)
     -> int32_t;
    pub fn nghttp2_session_get_effective_recv_data_length(session:
                                                              *mut nghttp2_session)
     -> int32_t;
    pub fn nghttp2_session_get_effective_local_window_size(session:
                                                               *mut nghttp2_session)
     -> int32_t;
    pub fn nghttp2_session_get_stream_remote_window_size(session:
                                                             *mut nghttp2_session,
                                                         stream_id: int32_t)
     -> int32_t;
    pub fn nghttp2_session_get_remote_window_size(session:
                                                      *mut nghttp2_session)
     -> int32_t;
    pub fn nghttp2_session_get_stream_local_close(session:
                                                      *mut nghttp2_session,
                                                  stream_id: int32_t)
     -> ::libc::c_int;
    pub fn nghttp2_session_get_stream_remote_close(session:
                                                       *mut nghttp2_session,
                                                   stream_id: int32_t)
     -> ::libc::c_int;
    pub fn nghttp2_session_terminate_session(session: *mut nghttp2_session,
                                             error_code: uint32_t)
     -> ::libc::c_int;
    pub fn nghttp2_session_terminate_session2(session: *mut nghttp2_session,
                                              last_stream_id: int32_t,
                                              error_code: uint32_t)
     -> ::libc::c_int;
    pub fn nghttp2_submit_shutdown_notice(session: *mut nghttp2_session)
     -> ::libc::c_int;
    pub fn nghttp2_session_get_remote_settings(session: *mut nghttp2_session,
                                               id: nghttp2_settings_id)
     -> uint32_t;
    pub fn nghttp2_session_set_next_stream_id(session: *mut nghttp2_session,
                                              next_stream_id: int32_t)
     -> ::libc::c_int;
    pub fn nghttp2_session_get_next_stream_id(session: *mut nghttp2_session)
     -> uint32_t;
    pub fn nghttp2_session_consume(session: *mut nghttp2_session,
                                   stream_id: int32_t, size: size_t)
     -> ::libc::c_int;
    pub fn nghttp2_session_consume_connection(session: *mut nghttp2_session,
                                              size: size_t) -> ::libc::c_int;
    pub fn nghttp2_session_consume_stream(session: *mut nghttp2_session,
                                          stream_id: int32_t, size: size_t)
     -> ::libc::c_int;
    pub fn nghttp2_session_upgrade(session: *mut nghttp2_session,
                                   settings_payload: *const uint8_t,
                                   settings_payloadlen: size_t,
                                   stream_user_data: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn nghttp2_pack_settings_payload(buf: *mut uint8_t, buflen: size_t,
                                         iv: *const nghttp2_settings_entry,
                                         niv: size_t) -> ssize_t;
    pub fn nghttp2_strerror(lib_error_code: ::libc::c_int)
     -> *const ::libc::c_char;
    pub fn nghttp2_priority_spec_init(pri_spec: *mut nghttp2_priority_spec,
                                      stream_id: int32_t, weight: int32_t,
                                      exclusive: ::libc::c_int) -> ();
    pub fn nghttp2_priority_spec_default_init(pri_spec:
                                                  *mut nghttp2_priority_spec)
     -> ();
    pub fn nghttp2_priority_spec_check_default(pri_spec:
                                                   *const nghttp2_priority_spec)
     -> ::libc::c_int;
    pub fn nghttp2_submit_request(session: *mut nghttp2_session,
                                  pri_spec: *const nghttp2_priority_spec,
                                  nva: *const nghttp2_nv, nvlen: size_t,
                                  data_prd: *const nghttp2_data_provider,
                                  stream_user_data: *mut ::libc::c_void)
     -> int32_t;
    pub fn nghttp2_submit_response(session: *mut nghttp2_session,
                                   stream_id: int32_t, nva: *const nghttp2_nv,
                                   nvlen: size_t,
                                   data_prd: *const nghttp2_data_provider)
     -> ::libc::c_int;
    pub fn nghttp2_submit_trailer(session: *mut nghttp2_session,
                                  stream_id: int32_t, nva: *const nghttp2_nv,
                                  nvlen: size_t) -> ::libc::c_int;
    pub fn nghttp2_submit_headers(session: *mut nghttp2_session,
                                  flags: uint8_t, stream_id: int32_t,
                                  pri_spec: *const nghttp2_priority_spec,
                                  nva: *const nghttp2_nv, nvlen: size_t,
                                  stream_user_data: *mut ::libc::c_void)
     -> int32_t;
    pub fn nghttp2_submit_data(session: *mut nghttp2_session, flags: uint8_t,
                               stream_id: int32_t,
                               data_prd: *const nghttp2_data_provider)
     -> ::libc::c_int;
    pub fn nghttp2_submit_priority(session: *mut nghttp2_session,
                                   flags: uint8_t, stream_id: int32_t,
                                   pri_spec: *const nghttp2_priority_spec)
     -> ::libc::c_int;
    pub fn nghttp2_submit_rst_stream(session: *mut nghttp2_session,
                                     flags: uint8_t, stream_id: int32_t,
                                     error_code: uint32_t) -> ::libc::c_int;
    pub fn nghttp2_submit_settings(session: *mut nghttp2_session,
                                   flags: uint8_t,
                                   iv: *const nghttp2_settings_entry,
                                   niv: size_t) -> ::libc::c_int;
    pub fn nghttp2_submit_push_promise(session: *mut nghttp2_session,
                                       flags: uint8_t, stream_id: int32_t,
                                       nva: *const nghttp2_nv, nvlen: size_t,
                                       promised_stream_user_data:
                                           *mut ::libc::c_void) -> int32_t;
    pub fn nghttp2_submit_ping(session: *mut nghttp2_session, flags: uint8_t,
                               opaque_data: *const uint8_t) -> ::libc::c_int;
    pub fn nghttp2_submit_goaway(session: *mut nghttp2_session,
                                 flags: uint8_t, last_stream_id: int32_t,
                                 error_code: uint32_t,
                                 opaque_data: *const uint8_t,
                                 opaque_data_len: size_t) -> ::libc::c_int;
    pub fn nghttp2_session_get_last_proc_stream_id(session:
                                                       *mut nghttp2_session)
     -> int32_t;
    pub fn nghttp2_session_check_request_allowed(session:
                                                     *mut nghttp2_session)
     -> ::libc::c_int;
    pub fn nghttp2_submit_window_update(session: *mut nghttp2_session,
                                        flags: uint8_t, stream_id: int32_t,
                                        window_size_increment: int32_t)
     -> ::libc::c_int;
    pub fn nghttp2_nv_compare_name(lhs: *const nghttp2_nv,
                                   rhs: *const nghttp2_nv) -> ::libc::c_int;
    pub fn nghttp2_select_next_protocol(out: *mut *mut ::libc::c_uchar,
                                        outlen: *mut ::libc::c_uchar,
                                        _in: *const ::libc::c_uchar,
                                        inlen: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn nghttp2_version(least_version: ::libc::c_int) -> *mut nghttp2_info;
    pub fn nghttp2_is_fatal(lib_error_code: ::libc::c_int) -> ::libc::c_int;
    pub fn nghttp2_check_header_name(name: *const uint8_t, len: size_t)
     -> ::libc::c_int;
    pub fn nghttp2_check_header_value(value: *const uint8_t, len: size_t)
     -> ::libc::c_int;
    pub fn nghttp2_hd_deflate_new(deflater_ptr: *mut *mut nghttp2_hd_deflater,
                                  deflate_hd_table_bufsize_max: size_t)
     -> ::libc::c_int;
    pub fn nghttp2_hd_deflate_new2(deflater_ptr:
                                       *mut *mut nghttp2_hd_deflater,
                                   deflate_hd_table_bufsize_max: size_t,
                                   mem: *mut nghttp2_mem) -> ::libc::c_int;
    pub fn nghttp2_hd_deflate_del(deflater: *mut nghttp2_hd_deflater) -> ();
    pub fn nghttp2_hd_deflate_change_table_size(deflater:
                                                    *mut nghttp2_hd_deflater,
                                                settings_hd_table_bufsize_max:
                                                    size_t) -> ::libc::c_int;
    pub fn nghttp2_hd_deflate_hd(deflater: *mut nghttp2_hd_deflater,
                                 buf: *mut uint8_t, buflen: size_t,
                                 nva: *const nghttp2_nv, nvlen: size_t)
     -> ssize_t;
    pub fn nghttp2_hd_deflate_bound(deflater: *mut nghttp2_hd_deflater,
                                    nva: *const nghttp2_nv, nvlen: size_t)
     -> size_t;
    pub fn nghttp2_hd_deflate_get_num_table_entries(deflater:
                                                        *mut nghttp2_hd_deflater)
     -> size_t;
    pub fn nghttp2_hd_deflate_get_table_entry(deflater:
                                                  *mut nghttp2_hd_deflater,
                                              idx: size_t)
     -> *const nghttp2_nv;
    pub fn nghttp2_hd_deflate_get_dynamic_table_size(deflater:
                                                         *mut nghttp2_hd_deflater)
     -> size_t;
    pub fn nghttp2_hd_deflate_get_max_dynamic_table_size(deflater:
                                                             *mut nghttp2_hd_deflater)
     -> size_t;
    pub fn nghttp2_hd_inflate_new(inflater_ptr: *mut *mut nghttp2_hd_inflater)
     -> ::libc::c_int;
    pub fn nghttp2_hd_inflate_new2(inflater_ptr:
                                       *mut *mut nghttp2_hd_inflater,
                                   mem: *mut nghttp2_mem) -> ::libc::c_int;
    pub fn nghttp2_hd_inflate_del(inflater: *mut nghttp2_hd_inflater) -> ();
    pub fn nghttp2_hd_inflate_change_table_size(inflater:
                                                    *mut nghttp2_hd_inflater,
                                                settings_hd_table_bufsize_max:
                                                    size_t) -> ::libc::c_int;
    pub fn nghttp2_hd_inflate_hd(inflater: *mut nghttp2_hd_inflater,
                                 nv_out: *mut nghttp2_nv,
                                 inflate_flags: *mut ::libc::c_int,
                                 _in: *mut uint8_t, inlen: size_t,
                                 in_final: ::libc::c_int) -> ssize_t;
    pub fn nghttp2_hd_inflate_end_headers(inflater: *mut nghttp2_hd_inflater)
     -> ::libc::c_int;
    pub fn nghttp2_hd_inflate_get_num_table_entries(inflater:
                                                        *mut nghttp2_hd_inflater)
     -> size_t;
    pub fn nghttp2_hd_inflate_get_table_entry(inflater:
                                                  *mut nghttp2_hd_inflater,
                                              idx: size_t)
     -> *const nghttp2_nv;
    pub fn nghttp2_hd_inflate_get_dynamic_table_size(inflater:
                                                         *mut nghttp2_hd_inflater)
     -> size_t;
    pub fn nghttp2_hd_inflate_get_max_dynamic_table_size(inflater:
                                                             *mut nghttp2_hd_inflater)
     -> size_t;
    pub fn nghttp2_session_find_stream(session: *mut nghttp2_session,
                                       stream_id: int32_t)
     -> *mut nghttp2_stream;
    pub fn nghttp2_stream_get_state(stream: *mut nghttp2_stream)
     -> nghttp2_stream_proto_state;
    pub fn nghttp2_session_get_root_stream(session: *mut nghttp2_session)
     -> *mut nghttp2_stream;
    pub fn nghttp2_stream_get_parent(stream: *mut nghttp2_stream)
     -> *mut nghttp2_stream;
    pub fn nghttp2_stream_get_stream_id(stream: *mut nghttp2_stream)
     -> int32_t;
    pub fn nghttp2_stream_get_next_sibling(stream: *mut nghttp2_stream)
     -> *mut nghttp2_stream;
    pub fn nghttp2_stream_get_previous_sibling(stream: *mut nghttp2_stream)
     -> *mut nghttp2_stream;
    pub fn nghttp2_stream_get_first_child(stream: *mut nghttp2_stream)
     -> *mut nghttp2_stream;
    pub fn nghttp2_stream_get_weight(stream: *mut nghttp2_stream) -> int32_t;
    pub fn nghttp2_stream_get_sum_dependency_weight(stream:
                                                        *mut nghttp2_stream)
     -> int32_t;
}
